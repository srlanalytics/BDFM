// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// QuickReg
arma::mat QuickReg(arma::mat X, arma::mat Y);
RcppExport SEXP _BDFM_QuickReg(SEXP XSEXP, SEXP YSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Y(YSEXP);
    rcpp_result_gen = Rcpp::wrap(QuickReg(X, Y));
    return rcpp_result_gen;
END_RCPP
}
// comp_form
arma::mat comp_form(arma::mat B);
RcppExport SEXP _BDFM_comp_form(SEXP BSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type B(BSEXP);
    rcpp_result_gen = Rcpp::wrap(comp_form(B));
    return rcpp_result_gen;
END_RCPP
}
// mvrnrm
arma::mat mvrnrm(int n, arma::vec mu, arma::mat Sigma);
RcppExport SEXP _BDFM_mvrnrm(SEXP nSEXP, SEXP muSEXP, SEXP SigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type mu(muSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Sigma(SigmaSEXP);
    rcpp_result_gen = Rcpp::wrap(mvrnrm(n, mu, Sigma));
    return rcpp_result_gen;
END_RCPP
}
// rinvwish
arma::cube rinvwish(int n, int v, arma::mat S);
RcppExport SEXP _BDFM_rinvwish(SEXP nSEXP, SEXP vSEXP, SEXP SSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type v(vSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type S(SSEXP);
    rcpp_result_gen = Rcpp::wrap(rinvwish(n, v, S));
    return rcpp_result_gen;
END_RCPP
}
// invchisq
double invchisq(double nu, double scale);
RcppExport SEXP _BDFM_invchisq(SEXP nuSEXP, SEXP scaleSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< double >::type scale(scaleSEXP);
    rcpp_result_gen = Rcpp::wrap(invchisq(nu, scale));
    return rcpp_result_gen;
END_RCPP
}
// stack_obs
arma:: mat stack_obs(arma::mat nn, arma::uword p, arma::uword r);
RcppExport SEXP _BDFM_stack_obs(SEXP nnSEXP, SEXP pSEXP, SEXP rSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type nn(nnSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type p(pSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type r(rSEXP);
    rcpp_result_gen = Rcpp::wrap(stack_obs(nn, p, r));
    return rcpp_result_gen;
END_RCPP
}
// PrinComp
List PrinComp(arma::mat Y, arma::uword m);
RcppExport SEXP _BDFM_PrinComp(SEXP YSEXP, SEXP mSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type m(mSEXP);
    rcpp_result_gen = Rcpp::wrap(PrinComp(Y, m));
    return rcpp_result_gen;
END_RCPP
}
// BReg
List BReg(arma::mat X, arma::mat Y, bool Int, arma::mat Bp, double lam, double nu, arma::uword reps, arma::uword burn);
RcppExport SEXP _BDFM_BReg(SEXP XSEXP, SEXP YSEXP, SEXP IntSEXP, SEXP BpSEXP, SEXP lamSEXP, SEXP nuSEXP, SEXP repsSEXP, SEXP burnSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Y(YSEXP);
    Rcpp::traits::input_parameter< bool >::type Int(IntSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Bp(BpSEXP);
    Rcpp::traits::input_parameter< double >::type lam(lamSEXP);
    Rcpp::traits::input_parameter< double >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type reps(repsSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type burn(burnSEXP);
    rcpp_result_gen = Rcpp::wrap(BReg(X, Y, Int, Bp, lam, nu, reps, burn));
    return rcpp_result_gen;
END_RCPP
}
// BReg_diag
List BReg_diag(arma::mat X, arma::mat Y, bool Int, arma::mat Bp, double lam, arma::vec nu, arma::uword reps, arma::uword burn);
RcppExport SEXP _BDFM_BReg_diag(SEXP XSEXP, SEXP YSEXP, SEXP IntSEXP, SEXP BpSEXP, SEXP lamSEXP, SEXP nuSEXP, SEXP repsSEXP, SEXP burnSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Y(YSEXP);
    Rcpp::traits::input_parameter< bool >::type Int(IntSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Bp(BpSEXP);
    Rcpp::traits::input_parameter< double >::type lam(lamSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type reps(repsSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type burn(burnSEXP);
    rcpp_result_gen = Rcpp::wrap(BReg_diag(X, Y, Int, Bp, lam, nu, reps, burn));
    return rcpp_result_gen;
END_RCPP
}
// DSmooth
List DSmooth(arma::mat B, arma::mat q, arma::mat H, arma::mat R, arma::mat Y);
RcppExport SEXP _BDFM_DSmooth(SEXP BSEXP, SEXP qSEXP, SEXP HSEXP, SEXP RSEXP, SEXP YSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type B(BSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type q(qSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type H(HSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type R(RSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Y(YSEXP);
    rcpp_result_gen = Rcpp::wrap(DSmooth(B, q, H, R, Y));
    return rcpp_result_gen;
END_RCPP
}
// DSUF
arma::mat DSUF(arma::mat B, arma::mat q, arma::mat H, arma::mat R, arma::mat Y);
RcppExport SEXP _BDFM_DSUF(SEXP BSEXP, SEXP qSEXP, SEXP HSEXP, SEXP RSEXP, SEXP YSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type B(BSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type q(qSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type H(HSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type R(RSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Y(YSEXP);
    rcpp_result_gen = Rcpp::wrap(DSUF(B, q, H, R, Y));
    return rcpp_result_gen;
END_RCPP
}
// FSimUF
arma::field<arma::mat> FSimUF(arma::mat B, arma::mat q, arma::mat H, arma::mat R, arma::mat Y);
RcppExport SEXP _BDFM_FSimUF(SEXP BSEXP, SEXP qSEXP, SEXP HSEXP, SEXP RSEXP, SEXP YSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type B(BSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type q(qSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type H(HSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type R(RSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Y(YSEXP);
    rcpp_result_gen = Rcpp::wrap(FSimUF(B, q, H, R, Y));
    return rcpp_result_gen;
END_RCPP
}
// EstDFM
List EstDFM(arma::mat B, arma::mat Bp, double lam_B, arma::mat q, double nu_q, arma::mat H, arma::mat Hp, double lam_H, arma::vec R, arma::vec nu_r, arma::mat Y, arma::uword reps, arma::uword burn, bool Loud);
RcppExport SEXP _BDFM_EstDFM(SEXP BSEXP, SEXP BpSEXP, SEXP lam_BSEXP, SEXP qSEXP, SEXP nu_qSEXP, SEXP HSEXP, SEXP HpSEXP, SEXP lam_HSEXP, SEXP RSEXP, SEXP nu_rSEXP, SEXP YSEXP, SEXP repsSEXP, SEXP burnSEXP, SEXP LoudSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type B(BSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Bp(BpSEXP);
    Rcpp::traits::input_parameter< double >::type lam_B(lam_BSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type q(qSEXP);
    Rcpp::traits::input_parameter< double >::type nu_q(nu_qSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type H(HSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Hp(HpSEXP);
    Rcpp::traits::input_parameter< double >::type lam_H(lam_HSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type R(RSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type nu_r(nu_rSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type reps(repsSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type burn(burnSEXP);
    Rcpp::traits::input_parameter< bool >::type Loud(LoudSEXP);
    rcpp_result_gen = Rcpp::wrap(EstDFM(B, Bp, lam_B, q, nu_q, H, Hp, lam_H, R, nu_r, Y, reps, burn, Loud));
    return rcpp_result_gen;
END_RCPP
}
// Ksmoother
List Ksmoother(arma::sp_mat A, arma::sp_mat Q, arma::sp_mat HJ, arma::mat R, arma::mat Y);
RcppExport SEXP _BDFM_Ksmoother(SEXP ASEXP, SEXP QSEXP, SEXP HJSEXP, SEXP RSEXP, SEXP YSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::sp_mat >::type A(ASEXP);
    Rcpp::traits::input_parameter< arma::sp_mat >::type Q(QSEXP);
    Rcpp::traits::input_parameter< arma::sp_mat >::type HJ(HJSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type R(RSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Y(YSEXP);
    rcpp_result_gen = Rcpp::wrap(Ksmoother(A, Q, HJ, R, Y));
    return rcpp_result_gen;
END_RCPP
}
// KestExact
List KestExact(arma::sp_mat A, arma::sp_mat Q, arma::mat H, arma::mat R, arma::mat Y, arma::vec itc, arma::uword m, arma::uword p);
RcppExport SEXP _BDFM_KestExact(SEXP ASEXP, SEXP QSEXP, SEXP HSEXP, SEXP RSEXP, SEXP YSEXP, SEXP itcSEXP, SEXP mSEXP, SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::sp_mat >::type A(ASEXP);
    Rcpp::traits::input_parameter< arma::sp_mat >::type Q(QSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type H(HSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type R(RSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type itc(itcSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type m(mSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(KestExact(A, Q, H, R, Y, itc, m, p));
    return rcpp_result_gen;
END_RCPP
}
// KSeas
List KSeas(arma::mat B, double q, arma::mat M, double r, arma::mat Y, arma::mat N);
RcppExport SEXP _BDFM_KSeas(SEXP BSEXP, SEXP qSEXP, SEXP MSEXP, SEXP rSEXP, SEXP YSEXP, SEXP NSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type B(BSEXP);
    Rcpp::traits::input_parameter< double >::type q(qSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type M(MSEXP);
    Rcpp::traits::input_parameter< double >::type r(rSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type N(NSEXP);
    rcpp_result_gen = Rcpp::wrap(KSeas(B, q, M, r, Y, N));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_BDFM_QuickReg", (DL_FUNC) &_BDFM_QuickReg, 2},
    {"_BDFM_comp_form", (DL_FUNC) &_BDFM_comp_form, 1},
    {"_BDFM_mvrnrm", (DL_FUNC) &_BDFM_mvrnrm, 3},
    {"_BDFM_rinvwish", (DL_FUNC) &_BDFM_rinvwish, 3},
    {"_BDFM_invchisq", (DL_FUNC) &_BDFM_invchisq, 2},
    {"_BDFM_stack_obs", (DL_FUNC) &_BDFM_stack_obs, 3},
    {"_BDFM_PrinComp", (DL_FUNC) &_BDFM_PrinComp, 2},
    {"_BDFM_BReg", (DL_FUNC) &_BDFM_BReg, 8},
    {"_BDFM_BReg_diag", (DL_FUNC) &_BDFM_BReg_diag, 8},
    {"_BDFM_DSmooth", (DL_FUNC) &_BDFM_DSmooth, 5},
    {"_BDFM_DSUF", (DL_FUNC) &_BDFM_DSUF, 5},
    {"_BDFM_FSimUF", (DL_FUNC) &_BDFM_FSimUF, 5},
    {"_BDFM_EstDFM", (DL_FUNC) &_BDFM_EstDFM, 14},
    {"_BDFM_Ksmoother", (DL_FUNC) &_BDFM_Ksmoother, 5},
    {"_BDFM_KestExact", (DL_FUNC) &_BDFM_KestExact, 8},
    {"_BDFM_KSeas", (DL_FUNC) &_BDFM_KSeas, 6},
    {NULL, NULL, 0}
};

RcppExport void R_init_BDFM(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
